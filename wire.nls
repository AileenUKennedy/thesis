to rewire-all

  ;; make sure num-turtles is setup correctly; if not run setup first
  if count turtles != totalNodes [
    setup
  ]


  ;; set up a variable to see if the network is connected
  let success? false

  ;; if we end up with a disconnected network, we keep trying, because the APL distance
  ;; isn't meaningful for a disconnected network.
  while [not success?] [
    ;; kill the old lattice, reset neighbors, and create new lattice
    ask links [ die ]
    wire-them
    set number-rewired 0

    ask links [

      ;; whether to rewire it or not?
      if (random-float 1) < rewiring-probability
      [
        ;; "a" remains the same
        let node1 end1
        ;; if "a" is not connected to everybody
        if [ count link-neighbors ] of end1 < (count turtles - 1)
        [
          ;; find a node distinct from node1 and not already a neighbor of node1
          let node2 one-of turtles with [ (self != node1) and (not link-neighbor? node1) ]
          ;; wire the new edge
          ask node1 [ create-link-with node2 [ set color cyan  set rewired? true ] ]

          set number-rewired number-rewired + 1  ;; counter for number of rewirings
          set rewired? true
        ]
      ]
      ;; remove the old edge
      if (rewired?)
      [
        die
      ]
    ]

    ;; check to see if the new network is connected and calculate path length and clustering
    ;; coefficient at the same time
    set success? do-calculations
  ]

  ;; do the plotting

end

;;creates a new lattice
 to wire-them
   ;;iterate over all turtles
  let n 0
  while [n < count turtles]
    [
      let k-temp 1
      set k-nei (average-degree / 2) ;;how many neighbours to make an edge with


    while [k-temp <= k-nei]
    [
      ;;make edge with k-nei neighbours
      make-edge turtle n turtle ((n + k-temp) mod count turtles)
      set k-temp k-temp + 1
      ]

    set n n + 1
    ]
end