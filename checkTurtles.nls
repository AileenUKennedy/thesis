to check-turtles
  let n  0
while [n < count turtles][
  ask turtle n [
   ;; show count my-links
   ;; show breed
    
    ;;ifelse loop for each breed. 
    ;;inside each, it checks to see if the number of links is greater or less than the "contact rate" eg infant-degree
    ;; it takes a margin of +- 1 on the degree parameter.
    ;;If less, it adds enough links to bring up to degree parameter. If more, it kills links
    ;;At the moment, it just adds the new links to random nodes, it doesn't check to see what degree the new end node has
    ;; when killing it links, it picks random nodes and as long as the link count is > 1, it will kill a link.
    ifelse breed = infants
    [
      if  count my-links < (infant-degree - 1 )
       [
         show "too few"
         show count my-links
         set movenode1 turtle n
         let z 0
         while [z < (infant-degree - count my-links)]
         [
           ;;while z is less than the number of links needed to be added
           ;;pick a random turtle that isn't already a neighbour and doesn't have too high a degree
          
           show movenode1
          set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) and (count my-links <= (average-degree + 2)) ]
          ask movenode1 [ create-link-with movenode2 [ set color yellow  ] ]
          set z z + 1
         ]
       ]
      if  count my-links >  (infant-degree + 1)
      [
        ;;if infant turtle has too many connections/links
        show "too many"
        show count my-links
        set movenode1 turtle n
        set counter 0
        while [ counter < ( count my-links - infant-degree)]
        [
          set movenode2 one-of turtles with [ (self != movenode1) and (link-neighbor? movenode1) and (count my-links > 1)]
          show "Turtle to chop"
          show movenode2
          ask movenode2 [show count my-links]
          ask movenode1 [ ask link-with movenode2 [ die ] ] 
          set counter counter + 1
        ]
      ]
    ]
    [
      ifelse breed = youths
      [
        if  count my-links < (youth-degree - 1 )
          [
            show " too few"
            show count my-links
            set movenode1 turtle n
            set counter 0
            while [counter < (youth-degree - count my-links)]
            [
              ;;while counter is less than the number of links needed to be added
              ;;pick a random turtle that isn't already a neighbour and doesn't have too high a degree
              show movenode1
              set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) and (count my-links <= (average-degree + 2)) ]
              ask movenode1 [ create-link-with movenode2 [ set color pink  ] ]
              set counter counter + 1
            ]
          ]
        if count my-links > ( youth-degree + 1)
        [
          show "too many"
          show count my-links
          set movenode1 turtle n
          set counter 0
          while [ counter < ( count my-links - youth-degree)]
        [
          set movenode2 one-of turtles with [ (self != movenode1) and (link-neighbor? movenode1) and (count my-links > 1)]
          show "Turtle to chop"
          show movenode2
          ask movenode2 [show count my-links]
          ask movenode1 [ ask link-with movenode2 [ die ] ] 
          set counter counter + 1
        ]
        ]
      ]
      [
        ifelse breed = adults
        [
          if  count my-links < (adult-degree - 1 )
          ;;considers too few if more than 1 less than average
          [
            show "too few"
            show count my-links
            set movenode1 turtle n
            set counter 0
            ;;while counter is less than the number of links needed to be added
            ;;pick a random turtle that isn't already a neighbour and doesn't have too high a degree
            while [counter < (adult-degree - count my-links)]
            [
              show movenode1
              set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) and (count my-links <= (average-degree + 2)) ]
              ask movenode1 [ create-link-with movenode2 [ set color red  ] ]
              set counter counter + 1
            ]
          ]
          if count my-links > (adult-degree + 1)
          [
            show "too many"
            show count my-links
            set movenode1 turtle n
            set counter 0
            while [ counter < ( count my-links - adult-degree)]
            [
              set movenode2 one-of turtles with [ (self != movenode1) and (link-neighbor? movenode1) and (count my-links > 1)]
              show "Turtle to chop"
              show movenode2
              ask movenode2 [show count my-links]
              ask movenode1 [ ask link-with movenode2 [ die ] ] 
              set counter counter + 1
            ]
          ]
        ]
        [
         if  count my-links < (elder-degree - 1 )
         [
           show "too few"
           show count my-links
           set movenode1 turtle n
           set counter 0
           ;;while counter is less than the number of links needed to be added
           ;;pick a random turtle that isn't already a neighbour and doesn't have too high a degree
           while [counter < (elder-degree - count my-links)]
           [
             show movenode1
             set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) and (count my-links <= (average-degree + 2)) ]
             ask movenode1 [ create-link-with movenode2 [ set color green  ] ]
             set counter counter + 1
            ]
         ]
         if count my-links > (elder-degree + 1)
         [
           show "too many"
           show count my-links
           set movenode1 turtle n
           set counter 0
           while [ counter < ( count my-links - elder-degree)]
           [
             set movenode2 one-of turtles with [ (self != movenode1) and (link-neighbor? movenode1) and (count my-links > 1)]
             show "Turtle to chop"
             show movenode2
             ask movenode2 [show count my-links]
             ask movenode1 [ ask link-with movenode2 [ die ] ] 
             set counter counter + 1
           ]
         ]
        ]
      ]

    ]

  ]
  set n n + 1
]



end