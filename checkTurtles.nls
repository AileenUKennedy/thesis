to check-turtles
  let n  0
while [n < count turtles][
  ask turtle n [
   ;; show count my-links
   ;; show breed
    
    ;;ifelse loop for each breed. 
    ;;inside each, it checks to see if the number of links is greater or less than the "contact rate" eg infant-degree
    ;; it takes a margin of +- 1 on the degree parameter.
    ;;If less, it adds enough links to bring up to degree parameter. If more, it kills links
    ;;At the moment, it just adds the new links to random nodes, it doesn't check to see what degree the new end node has
    ;; when killing it links, it picks random nodes and as long as the link count is > 1, it will kill a link.
    ifelse breed = infants
    [

      if  count my-links < (infant-degree - 1 )
       [
         show "too few"
         show count my-links
         set movenode1 turtle n
         let z 0
         while [z <= (infant-degree - count my-links)]
         [
           ;;while z is less than the number of links needed to be added
           ;;pick a random turtle that isn't already a neighbour and doesn't have too high a degree
           ;;c
           show movenode1
         
          set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) and (count my-links <= (average-degree + 2)) ]

        ;;  ask movenode2 [ show count my-links]
        ;; ask movenode2[
        ;;   show "this stuff!!!"
       ;;    show movenode2
         ;  ;;show node1
        ;;   show count my-links
        ;;   set nei-node2 count my-links
        ;; ]
         
         ;;want to find a new node to link with that doesn't have already have a degree above average + 1
        ;; while [nei-node2  > (average-degree + 2) ]
        ;;  [
         ;;                set movenode2 one-of turtles with [ (self != movenode1) and (not link-neighbor? movenode1) ]

         ;;    ask movenode2[
        ;;   show "while lop"
        ;;   show movenode2
           ;;show node1
        ;;   show count my-links
        ;;   set nei-node2 count my-links
        ;;     ]
         ;; ] ;; end of while loop
         ;;create a link between the nodes
           ask movenode1 [ create-link-with movenode2 [ set color yellow  ] ]
          set z z + 1
         ]
       ]
      if  count my-links >  (infant-degree + 1)
      [
        ;;if infant turtle has too many connections/links
        show "too many"
        show count my-links
        set movenode1 turtle n
        set movenode2 one-of turtles with [ (self != movenode1) and (link-neighbor? movenode1) and (count my-links > 1)]
        show "Turtle to chop"
        show movenode2
        ask movenode2 [show count my-links]
       
      ]
    ]
    [
      ifelse breed = youths
      [
        if  count my-links < (youth-degree - 1 )
          [
            show " too few"
            show count my-links
          ]
        if count my-links >= ( youth-degree + 1)
        [
          show "too many"
          show count my-links
        ]
      ]
      [
        ifelse breed = adults
        [
          if  count my-links < (adult-degree - 1 )
          [
            show "too few"
            show count my-links
          ]
          if count my-links >= (adult-degree + 1)
          [
            show "too many"
            show count my-links
          ]

        ]
        [
         if  count my-links < (elder-degree - 1 )
         [
           show "too few"
           show count my-links
         ]
         if count my-links >= (elder-degree + 1)
         [
           show "too many"
           show count my-links
         ]

        ]
      ]

    ]

  ]
  set n n + 1
]



end